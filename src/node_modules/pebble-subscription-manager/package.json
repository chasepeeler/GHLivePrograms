{
  "name": "pebble-subscription-manager",
  "version": "0.0.0",
  "description": "Module for creating watched based interfaces for managing subscriptions to timeline topics managed by your app.",
  "author": {
    "name": "Peeler Coding, LLC",
    "email": "chase@peelercoding.com"
  },
  "bugs": {
    "url": "https://github.com/chasepeeler/PebbleJSSubscriptionManager/issues"
  },
  "homepage": "https://github.com/chasepeeler/PebbleJSSubscriptionManager",
  "keywords": [
    "pebble",
    "pebble-js",
    "pebblejs"
  ],
  "license": "MIT",
  "files": [
    "subscription_manager.js"
  ],
  "main": "subscription_manager.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chasepeeler/PebbleJSSubscriptionManager.git"
  },
  "readme": "# PebbleJSSubscriptionManager\nModule for creating watched based interfaces for managing subscriptions to timeline topics managed by your app.\n\n## How To Use:\n\n### 1) Load the module with require:\n\n```javascript\nvar SubscriptionManager = require(\"subscription_manager\");\n```\n\n### 2) Initialize module\n\nThe constructor takes the following arguments:\n\nParameter | Type | Default | Description\n--------- | ---- | ------- | -----------\ntitle | string | &lt;empty string&gt; | The title used on the main screen.\nicon | string | &lt;empty string&gt; | An icon to be used on the main screen.\nsubtitle | string | &lt;empty string&gt; | The subtitle to be used on the main screen.\nbody | string | Press the middle button to configure subscriptions. | The body text to be used on the main screen.\nunsubscribed_label | string | Unsubscribed | The label to be shown on the menu to indicate un-subscribed topics.\nsubscribed_label | string | Subscribed | The label to be shown on the menu to indicate subscribed topics.\nreset_downclicks_required | integer | 3 | More on this below\n\nThe options can be passed in as parameters in the order above, or as a hash. Any null parameters or missing hash properties will be set to the default values.\n\n```javascript\nvar sm = new SubscriptionManager(\"My App\",null,\"Subscription Manager\");\n```\n```javascript\nvar sm = new SubscriptionManager({title: \"My App\", subtitle: \"Subscription Manager\"});\n```\n### 3) Add topics\n\nA topic has the following properties:\n\nProperty | Type | Default | Description\n-------- | ---- | ------- | -----------\nid | string | &lt;empty string&gt; | The ID of the topic that will be used by your app to determine which pins to show.\ntitle | string | &lt;empty string&gt; | The name of the title that will be shown in the selection menu.\nicon | string | &lt;empty string&gt; | An icon that can be shown next to the title in the selection menu.\nsubscribed | boolean | false | Whether or not to the topic is subscribed to by the user. You probably want to leave this as false when adding a topic.\nsubtitle | string | &lt;unsubscribed_label&gt; | What to show as the subtitle on the selection menu. You probably want to leave this as-is.\n\nYou can add a single topic by calling the `addTopic` method. Parameters can be specified individually in the order above, or as a hash. Any null parameters or missing hash properties will be set to the default values.\n\n```javascript\nsm.addTopic(\"sports-topic\",\"Sports\")\n```\n```javascript\nsm.addTopic({id: \"sports-topic\", title: \"Sports\"});\n```\n\nYou can add multiple topics by passing in an array of topic hashes. This is equivalent to calling addTopic with each array item.\n\n```javascript\nvar topics = [\n  {id: \"sports-topic\", title: \"Sports\"},\n  {id: \"history-topic\", title: \"History\"}\n];\nsm.addTopics(topics);\n```\n\n### 4) Start it\n```javascript\nsm.start()\n```\n\nThis will kick off the initialization process, which pulls in a list of currently subscribed topics and sets them to `true`. This is why you probably don't want to specify the value of `subscribed` when adding a topic.\n\nAfter that it will load the actual screens. The user presses the middle button on the first screen to be presented with a list of topics. Selecting a topic and then pressing the middle button will toggle the status of that subscription.\n\n## Reset\nThis is mainly for debugging, but there is no reason you can't expose it to users. When on the main screen, if you press the down button a certain number of times (see `reset_downclicks_required`) followed by a long-click of the middle button, you will be un-subscribed from all topics. If at any point in the down click process, you press another button, it will reset the click count. \n\n## Example\nThe following app shows what the screens will look like:\n\n[eCribbage Tournaments](https://apps.getpebble.com/en_US/application/559dc7b7807f3e76f10000a4)",
  "readmeFilename": "README.md",
  "gitHead": "2a3b5d68d3caa5c78195606a16710b0346fdf298",
  "_id": "pebble-subscription-manager@0.0.0",
  "scripts": {},
  "_shasum": "0349c9ba6e5072225a53595b9e88e5767a9c1821",
  "_from": "pebble-subscription-manager@*"
}
